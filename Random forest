from sklearn.ensemble import RandomForestClassifier

X= df[features]
y= df.output

X= scale(X)
X_train,X_val,y_train,y_val= dataset(X,y)

forest_model= RandomForestClassifier(random_state=1)
forest_model.fit(X_train, y_train)
preds= forest_model.predict(X_val)

a='Random Forest with top 7'
acc=accuracy_score(y_val,preds)*100
roc=roc_auc_score(y_val,preds)

print('ACCURACY: ',acc)
print('AUC score: ',roc)

model.append((a,round(acc,4),round(roc,4)))
X= df[features]
y= df.output

X= scale(X)
X_train,X_val,y_train,y_val= dataset(X,y)

#determing depth
depth=[5,10,15,20]
score=[]
score1=[]
for d in depth:
       for n in range(10,201,10):


        rmodel = RandomForestClassifier(n_estimators=n,random_state=1,max_depth=d)
        rmodel.fit(X_train, y_train)

        pred = rmodel.predict(X_val)
        acc= accuracy_score(y_val,pred)*100
        auc = roc_auc_score(y_val,pred)

        #print('%4s %s  %.2f %.3f'%(n,d,acc,auc))
        score.append((d,n,auc))
        
#creating dataframe
columns = ['max_depth', 'n_estimators', 'auc']
df_scores = pd.DataFrame(score, columns=columns)
## finalized paramter values 

X= df[features]
y= df.output

X= scale(X)
X_train,X_val,y_train,y_val= dataset(X,y)

forest_model= RandomForestClassifier(n_estimators=27,random_state=11,max_depth=20,min_samples_leaf=1)
forest_model.fit(X_train, y_train)
preds= forest_model.predict(X_val)

a='Random Forest with parameter tuning'
acc=accuracy_score(y_val,preds)*100
roc=roc_auc_score(y_val,preds)

print('ACCURACY: ',acc)
print('AUC score: ',roc)

model.append((a,round(acc,4),round(roc,4)))
